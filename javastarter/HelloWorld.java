// a small Java program
// to make publically available folder and file must have same name
public class HelloWorld {
    public static void main(String[] args) {
        System.out.println("Hello World!");
    }
}

//need methods to access/set parent class variables because of encapsulation
//Classes can only extend one class.
// For Checked exceptions you have to tell the compiler what to look for. (Have to be explicit)
// Runtime errors do not have to be accounted for.
// throwable is an interface.
// 3 categories, errors, runtime exceptions and exceptions.
// Error means that the program is crashing. 
// If you code an exception object you have to use that class everywhere.
// Checked exceptions should generally be something that you can fix.
// Interfaces are implemented when classes share similar behaviour, but the way they use 
// that behaviour is different. e.g. glassware can contain liquid, but you determine the
// volume of water differs based on the vessel. e.g. erlenmeyer vs measuring cylinder.
//          Define what it's capable of but leave the implementation to the abstract classes.
//          If you implement an interface in a class you have to use all the methods associated with the interfaces

//objects follow EIAP
//  Encapsulation, Inheritance, Abstraction and Polymorphism.
// int is a variable that is a value. 
// Integer is a reference to a value.
// Instance variables are created in a class every time an instance of that class is created.
// Final is equivalent to const variables

// Transient variables are ones that can be created from variables that 
        // can make the transient variable so it doesn't have to be stored separately.

        // An overloaded method only has 1 of the signature elements of a method.
        // e.g. get vol will return water. But if you use sand you can return grams.

        // constructors must be present in every class. They are generated by default
        // if they are not explicitly defined. To keep them private you have to 
        // define the constructor in a class and make it private.
// Abstract methods can't be private or final because they have to be used
        // And if they are private this cannot be done.